package our.salesinventorysystem;

import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.DriverManager;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;
import others.NewlineTableCellRenderer;

/**
 *
 * @author Beee
 */
public class menu_owner extends javax.swing.JFrame {
    Connection con = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    
    DefaultTableModel ingredientModel;
    DefaultTableModel menuModel;
    
    int currentID;
    
    public menu_owner() {
        initComponents();
        
        ingredientModel = (DefaultTableModel) ingredientTable.getModel();
        menuModel = (DefaultTableModel) menuTable.getModel();
        gramsToAddTxt.setText("0.00");
        
        showTable();
        showTable2();
        showTable3();
    }
    
    private void connect() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc.mysql://localhost/salesinventorysystem", "root", "");
        }
        catch(ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        productID = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        productName = new javax.swing.JTextField();
        clear2 = new javax.swing.JButton();
        deleteIngredientBtn = new javax.swing.JButton();
        newProduct = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        ingredientTable = new javax.swing.JTable();
        reduceIngredientBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_2 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        gramsToAddTxt = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        deleteProductBtn = new javax.swing.JButton();
        clearProductBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 659));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(700, 200));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Product ID:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Price:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel3.setText("Product Name:");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));

        productID.setEditable(false);
        productID.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        productID.setBorder(null);

        price.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        price.setBorder(null);

        productName.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        productName.setBorder(null);

        clear2.setBackground(new java.awt.Color(0, 153, 102));
        clear2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        clear2.setText("Clear");
        clear2.setBorder(null);
        clear2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear2ActionPerformed(evt);
            }
        });

        deleteIngredientBtn.setBackground(new java.awt.Color(0, 153, 102));
        deleteIngredientBtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        deleteIngredientBtn.setText("Delete");
        deleteIngredientBtn.setBorder(null);
        deleteIngredientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteIngredientBtnActionPerformed(evt);
            }
        });

        newProduct.setBackground(new java.awt.Color(0, 153, 102));
        newProduct.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        newProduct.setText("New");
        newProduct.setBorder(null);
        newProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProductActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 153, 102));
        jButton1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_back_20px.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ingredientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Qty. (grams)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ingredientTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(ingredientTable);
        if (ingredientTable.getColumnModel().getColumnCount() > 0) {
            ingredientTable.getColumnModel().getColumn(0).setResizable(false);
            ingredientTable.getColumnModel().getColumn(1).setResizable(false);
            ingredientTable.getColumnModel().getColumn(1).setPreferredWidth(10);
        }

        reduceIngredientBtn.setBackground(new java.awt.Color(0, 153, 102));
        reduceIngredientBtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        reduceIngredientBtn.setText("Reduce");
        reduceIngredientBtn.setBorder(null);
        reduceIngredientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reduceIngredientBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(price, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                            .addComponent(productID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productName, javax.swing.GroupLayout.Alignment.LEADING))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(newProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteIngredientBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reduceIngredientBtn))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {price, productID, productName});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clear2, deleteIngredientBtn, newProduct, reduceIngredientBtn});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(3, 3, 3)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(3, 3, 3)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel5))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newProduct)
                            .addComponent(clear2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteIngredientBtn))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(reduceIngredientBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {price, productID, productName});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {clear2, deleteIngredientBtn, newProduct, reduceIngredientBtn});

        jPanel4.setBackground(new java.awt.Color(0, 204, 153));

        table_2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        table_2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Cost", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_2.getTableHeader().setReorderingAllowed(false);
        table_2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_2);
        if (table_2.getColumnModel().getColumnCount() > 0) {
            table_2.getColumnModel().getColumn(0).setResizable(false);
            table_2.getColumnModel().getColumn(0).setPreferredWidth(10);
            table_2.getColumnModel().getColumn(1).setResizable(false);
            table_2.getColumnModel().getColumn(2).setResizable(false);
            table_2.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("INVENTORY");

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setText("Grams to add:");

        gramsToAddTxt.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        gramsToAddTxt.setBorder(null);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator6)
                    .addComponent(gramsToAddTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                .addGap(388, 388, 388))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(gramsToAddTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(0, 204, 153));

        menuTable.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Selling Price", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menuTable.getTableHeader().setReorderingAllowed(false);
        menuTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(menuTable);
        if (menuTable.getColumnModel().getColumnCount() > 0) {
            menuTable.getColumnModel().getColumn(0).setResizable(false);
            menuTable.getColumnModel().getColumn(0).setPreferredWidth(1);
            menuTable.getColumnModel().getColumn(1).setResizable(false);
            menuTable.getColumnModel().getColumn(2).setResizable(false);
            menuTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("PRODUCTS IN MENU");

        deleteProductBtn.setBackground(new java.awt.Color(0, 153, 102));
        deleteProductBtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        deleteProductBtn.setText("Delete");
        deleteProductBtn.setBorder(null);
        deleteProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductBtnActionPerformed(evt);
            }
        });

        clearProductBtn.setBackground(new java.awt.Color(0, 153, 102));
        clearProductBtn.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        clearProductBtn.setText("Clear");
        clearProductBtn.setBorder(null);
        clearProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearProductBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clearProductBtn, deleteProductBtn});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteProductBtn)
                    .addComponent(clearProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {clearProductBtn, deleteProductBtn});

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 204, 153));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel9.setText("MANAGE MENU");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(jLabel9)
                .addContainerGap(1043, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1328, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void showTable(){
        try {
            String database = "SELECT product_id AS 'Product ID', product_name AS 'Product Name', cost AS 'Cost', stock AS 'Stock (kg)' FROM inventory order by product_id";
            con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
            ps = con.prepareStatement(database);
            rs = ps.executeQuery();
            table_2.setModel(DbUtils.resultSetToTableModel(rs));

            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }       

    }
    
    public void showTable2(){
        try {
            String database = "SELECT product_id AS 'Product ID', product_name AS 'Product Name', price AS 'Selling Price', description AS 'Description' FROM menu order by product_id";
            con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
            
            ps = con.prepareStatement(database);
            rs = ps.executeQuery();
            ResultSetMetaData rss = rs.getMetaData(); //kuhaon niya ang metadata sa (rs) (para ma access lang nimo ang column sa database table mao ra)
            int columnIndex = rss.getColumnCount();
            
            menuModel.setRowCount(0);
            currentID = 0;
            
            while(rs.next()) {
                Vector v = new Vector();
                for(int i=0; i<columnIndex; i++) {
                    v.add(rs.getString("Product ID"));
                    v.add(rs.getString("Product Name"));
                    v.add(rs.getFloat("Selling Price"));
                    menuTable.getColumnModel().getColumn(3).setCellRenderer(new NewlineTableCellRenderer());
                    v.add(rs.getString("description"));
                }
                
                menuModel.addRow(v);
                productID.setText(String.valueOf(++currentID));
            }
           //menuTable.setModel(DbUtils.resultSetToTableModel(rs));
           
           
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    public void showTable3(){
        try {
            String database = "SELECT product_id AS 'Product ID', stock AS 'Stock' FROM dummytable1 order by product_id";
            con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
            ps = con.prepareStatement(database);
            rs = ps.executeQuery();
            //tabledummy_1.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }       
    }
    
    private void clear2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear2ActionPerformed
        productName.setText("");
        price.setText("");
        
        ingredientModel = (DefaultTableModel) ingredientTable.getModel();
        ingredientModel.setRowCount(0);
    }//GEN-LAST:event_clear2ActionPerformed

    private void deleteIngredientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteIngredientBtnActionPerformed
//        try {
            //DefaultTableModel tablemdldummy = (DefaultTableModel)tabledummy_1.getModel();
//            DefaultTableModel tablemdl3 = (DefaultTableModel)table_3.getModel();
//
//            int row = table_3.getSelectedRow();
//
//            float stockINmenu = (float) tablemdl3.getValueAt(row,3);
//            //float stockINdummy = (float) tablemdldummy.getValueAt(row,1);
//
//            //float d1 = stockINmenu + stockINdummy;
//
//            //String stockTOinventory = Float.toString(d1);
//            
//            float d2 = 0;
//            String backtoReport = Float.toString(d2);
//            if(table_3.getSelectedRowCount()== 1) {
//
//                try {
//
//                    String database = "UPDATE inventory SET stock= ? WHERE product_id=?";
//                    Class.forName("com.mysql.cj.jdbc.Driver");
//                    con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
//                    ps=con.prepareStatement(database);
//                    ps.setString(2,id_2.getText());
//                    //ps.setString(1,stockTOinventory);
//                    ps.executeUpdate();
//                    
//                    
//                    String database3 = "UPDATE report SET stock_menu= ?,remaining_stock=?, value= remaining_stock*cost WHERE product_id=?";
//                    Class.forName("com.mysql.cj.jdbc.Driver");
//                    con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
//                    ps=con.prepareStatement(database3);
//                    ps.setString(3,id_2.getText());
//                    ps.setString(1,backtoReport);
//                    //ps.setString(2,stockTOinventory);
//                    ps.executeUpdate();
//                    
//                  
//                    
//                    
//                    String database1 = "DELETE FROM menu WHERE product_id=?";
//                    Class.forName("com.mysql.cj.jdbc.Driver");
//                    con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
//                    ps=con.prepareStatement(database1);
//                    ps.setString(1,id_2.getText());
//                    ps.executeUpdate();
//
//                    JOptionPane.showMessageDialog(null, "Succesfully deleted");
//
//                    try {
//
//                        String database2 = "DELETE FROM dummytable1 WHERE product_id=?";
//                        Class.forName("com.mysql.cj.jdbc.Driver");
//                        con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
//                        ps=con.prepareStatement(database2);
//                        ps.setString(1,id_2.getText());
//                        ps.executeUpdate();
//                        
//                        id_2.setText(String.format("%03d", table_3.getRowCount()));
//                        name_2.setText("");
//                        price.setText("");
//                        descriptionField.setText("");
//
//                    }catch (Exception ex) {
//                        JOptionPane.showMessageDialog(null, ex);
//                    }
//                    showTable3();
//
//                } catch (Exception ex) {
//                    JOptionPane.showMessageDialog(null, ex);
//                }
//                showTable();
//
//            }else{
//                if(table_3.getRowCount()==0) {
//                    JOptionPane.showMessageDialog(this, "Table is empty");
//                }else{
//                    JOptionPane.showMessageDialog(this, "Please select single row to update!");
//                }
//            }
//
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(null, ex);
//        }
//        showTable2();

        int selectedRow = ingredientTable.getSelectedRow();
        
        if(selectedRow != -1) {
           ingredientModel.removeRow(selectedRow); 
        }
        else {
            JOptionPane.showMessageDialog(this, "No Selected Row on Ingredient Table", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteIngredientBtnActionPerformed

    
    
    private void newProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProductActionPerformed
//        try {
//            if(id_2.getText().equals("")||name_2.getText().equals("")||price.getText().equals("")) {
//                JOptionPane.showMessageDialog(this, "Kindly enter all data needed");
//            }
//            else
//            {
//                DefaultTableModel tablemdl2 = (DefaultTableModel) table_2.getModel();
//                int selectedRow = table_2.getSelectedRow();
//
//                float instock = (float) tablemdl2.getValueAt(selectedRow,3);
//                //String d2 = descriptionField.getText();
////                float stockAvail = Float.parseFloat(d2);
////                float checkStock = instock - stockAvail;
//
//                if (checkStock>=0) {
//                    String database2 = "INSERT INTO menu (product_id, product_name,price, description) VALUES (?,?,?,?)";
//                    Class.forName("com.mysql.cj.jdbc.Driver");
//                    con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
//                    ps=con.prepareStatement(database2);
//                    ps.setString(1,id_2.getText());
//                    ps.setString(2, name_2.getText());
//                    ps.setString(3,price.getText());
//                    //ps.setString(4,descriptionField.getText());
//
//                    String dummy1 = id_2.getText();
//                    int prodId = Integer.parseInt(dummy1);
//
//                    String checker = "SELECT * FROM menu where product_id="+ prodId+"";
//                    ResultSet rs = ps.executeQuery(checker);
//
//                    if(rs.next()) {
//                        JOptionPane.showMessageDialog(this,"Product ID:"+prodId+" already existed");
//                        id_2.setText(String.format("%03d", table_3.getRowCount()));
//                        name_2.setText("");
//                        price.setText("");
//                        descriptionField.setText("");
//                    }else{
//                        ps.executeUpdate();
//                        JOptionPane.showMessageDialog(null, "Succesfully added");
//
//                        try {
//                            float d3 = checkStock;
//                            String returnStock = Float.toString(d3);
//                            String database = "UPDATE inventory SET stock= ? WHERE product_id=?";
//                            Class.forName("com.mysql.cj.jdbc.Driver");
//                            con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
//                            ps = con.prepareStatement(database);
//                            ps.setString(2,id_2.getText());
//                            ps.setString(1,returnStock);
//                            ps.executeUpdate();
//                            
//                            
//                            String database5 = "UPDATE report SET stock_menu=?, remaining_stock=stock-stock_menu, value= remaining_stock*cost WHERE product_id=?";
//                            Class.forName("com.mysql.cj.jdbc.Driver");
//                            con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
//                            ps = con.prepareStatement(database5);
//                            ps.setString(2,id_2.getText());
//                            ps.setString(1,descriptionField.getText());
//                            ps.executeUpdate();
//
//                        
//                        try{
//
//                            String database4 = "INSERT INTO dummytable1 (product_id, stock) VALUES (?,?)";
//                            Class.forName("com.mysql.cj.jdbc.Driver");
//                            con = DriverManager.getConnection("jdbc:mysql://localhost:/salesinventorysystem","root","");
//                            ps = con.prepareStatement(database4);
//                            ps.setString(1,id_2.getText());
//                            ps.setString(2,returnStock);
//                            ps.executeUpdate();
//
//                                    //catch for table dummy
//                        }catch(Exception ex){
//
//                            JOptionPane.showMessageDialog(null, ex);
//
//                            }
//                                showTable3();
//
//                                //catch for update inventory report
//                           
//                            //catch for update inventory
//                        } catch (Exception ex) {
//                            JOptionPane.showMessageDialog(null, ex);
//
//                        }
//                        showTable();
//
//                        id_2.setText(String.format("%03d", table_3.getRowCount()+1));
//                        name_2.setText("");
//                        price.setText("");
//                        descriptionField.setText("");
//                    }
//
//                }else{
//                    JOptionPane.showMessageDialog(null, "Failed to add. You reach the limit of the stock");
//                    id_2.setText(String.format("%03d", table_3.getRowCount()));
//                    name_2.setText("");
//                    price.setText("");
//                    descriptionField.setText("");
//                }
//            }
//
//            //catch for inset menu
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(null, ex);
//        }
        
        try {
            if(ingredientModel.getRowCount() > 0) {
                
                String description = "";
                
                for(int i=0; i<ingredientTable.getRowCount(); i++) {
                    String fName = ingredientTable.getValueAt(i, 0).toString();
                    float qtyInGrams = Float.parseFloat(ingredientTable.getValueAt(i, 1).toString());
                    
                    description += fName+"\t"+qtyInGrams+"g\n";
                }
                
                ps = con.prepareStatement("INSERT INTO menu (product_id, product_name, price, description) VALUES (?,?,?,?)");
                ps.setInt(1, Integer.parseInt(productID.getText()));
                ps.setString(2, productName.getText());
                ps.setFloat(3, Float.parseFloat(price.getText()));
                ps.setString(4, description);
                
                productID.setText(String.valueOf(++currentID));
                productName.setText(null);
                price.setText(null);
                
                ingredientModel.setRowCount(0);
                
                ps.executeUpdate();
            }
            else {
                JOptionPane.showMessageDialog(this, "No Ingredient Found", "Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        showTable2();
    }//GEN-LAST:event_newProductActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new HOME_OWNER().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void table_2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_2MouseClicked
//        DefaultTableModel tablemdl2 = (DefaultTableModel) table_2.getModel();
//        int selectedRow = table_2.getSelectedRow();
//
//        String d1 = (String) tablemdl2.getValueAt(selectedRow,0);
//        String d2 = (String) tablemdl2.getValueAt(selectedRow,1);
//        float d3 = Float.parseFloat(tablemdl2.getValueAt(selectedRow,2).toString());
//
//        
//
//        id_2.setText(d1);
//        name_2.setText(d2);
        
        //CHANGES HERE
        //adding inventory item to packageContentTable
        int selectedTable2Row = table_2.getSelectedRow();
        DefaultTableModel packageModel = (DefaultTableModel) ingredientTable.getModel();
        //float currentStock = (float)table_2.getValueAt(selectedTable2Row, 3);
        
        boolean found = false;
        
        if(packageModel.getRowCount() > 0) {
            for(int i=0; i<packageModel.getRowCount(); i++) {
                //check if ther is an existing product using its productName
                String table_2productName = table_2.getValueAt(selectedTable2Row, 1).toString();
                String packageTableProductName = packageModel.getValueAt(i, 0).toString();
                
                if(table_2productName.equals(packageTableProductName)) {
                    found = true;
                    
                    float qtyValue = Float.parseFloat(packageModel.getValueAt(i, 1).toString());
                    packageModel.setValueAt((qtyValue + Float.parseFloat(gramsToAddTxt.getText())), i, 1);
                }
            }
        } 
        
        if(!found) {
            Object[] newRow = new Object[2];
            
            newRow[0] = table_2.getValueAt(selectedTable2Row, 1); //product name
            newRow[1] = Float.parseFloat(gramsToAddTxt.getText());
                    
            packageModel.addRow(newRow);
        }
    }//GEN-LAST:event_table_2MouseClicked

    private void menuTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuTableMouseClicked
        DefaultTableModel tmodel3 = (DefaultTableModel) menuTable.getModel();
        int selectedRow = menuTable.getSelectedRow();

        String d1 = (String) tmodel3.getValueAt(selectedRow,0);
        productID.setText(d1);
    }//GEN-LAST:event_menuTableMouseClicked

    private void deleteProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductBtnActionPerformed

        if(menuTable.getSelectedRow() >= 0) {
            int choice = JOptionPane.showConfirmDialog(this, "Do you really want to delete this row?",
                "Delete Row", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            //check niya ang value sa choice (0 = yes, 1 = no)
            if(choice == JOptionPane.YES_OPTION) {
                int selectedRow = menuTable.getSelectedRow();

                try {
                    ps = con.prepareStatement("DELETE FROM menu WHERE product_name = ?");
                    ps.setString(1, menuTable.getValueAt(selectedRow, 1).toString());

                    ps.executeUpdate();

                } catch (SQLException ex) {
                    JOptionPane.showConfirmDialog(this, ex);
                }

                showTable2();
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "No row selected", "Error", JOptionPane.ERROR_MESSAGE);
        }     
    }//GEN-LAST:event_deleteProductBtnActionPerformed

    private void clearProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearProductBtnActionPerformed
        try {
            ps = con.prepareStatement("DELETE FROM menu");
            ps.executeUpdate();
            
            showTable2();
        }
        catch(SQLException e) {
            
        }
    }//GEN-LAST:event_clearProductBtnActionPerformed

    private void reduceIngredientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reduceIngredientBtnActionPerformed
        int selectedOrderRow = ingredientTable.getSelectedRow();

        //check first if naa bay gi select na row sa ingredientTable
        if(ingredientTable.getSelectedRow() > -1) {
            //kuhaon nato ang current quantity sa giselect nato na row sa ingredientTable
            float qty = Float.parseFloat(ingredientModel.getValueAt(selectedOrderRow, 1).toString());
            ingredientModel.setValueAt(--qty, selectedOrderRow, 1); //i deacrease nato ang qty sa selected row

            //if <= 0 na ang quantity, then i-remove nanato siya sa ingredientTable
            if(qty <= 0) {
                ingredientModel.removeRow(selectedOrderRow);
            }
        }
        else {
            //show error dialog
            JOptionPane.showMessageDialog(this, "No Row Selected in Ingredient Table", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_reduceIngredientBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu_owner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu_owner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu_owner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu_owner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menu_owner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear2;
    private javax.swing.JButton clearProductBtn;
    private javax.swing.JButton deleteIngredientBtn;
    private javax.swing.JButton deleteProductBtn;
    private javax.swing.JTextField gramsToAddTxt;
    private javax.swing.JTable ingredientTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTable menuTable;
    private javax.swing.JButton newProduct;
    private javax.swing.JTextField price;
    private javax.swing.JTextField productID;
    private javax.swing.JTextField productName;
    private javax.swing.JButton reduceIngredientBtn;
    private javax.swing.JTable table_2;
    // End of variables declaration//GEN-END:variables
}
